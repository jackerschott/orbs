#version 320 es

$include "rng/uint64.glsl"
$include "rng/rng_mwc_skip.glsl"
$include "rng/rng_mwc64x.glsl"
$include "rng/rng_tables.glsl"

layout(location = 0) uniform uint nSamples;
layout(location = 1) uniform uvec2 off;

layout(binding = 0) buffer samplesBuf { float samples[]; };

float normPdf(float x);

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main() {
  uint g = gl_GlobalInvocationID.x
    + gl_NumWorkGroups.x * gl_WorkGroupSize.x * gl_GlobalInvocationID.y
    + gl_NumWorkGroups.x * gl_WorkGroupSize.x * gl_NumWorkGroups.y * gl_WorkGroupSize.y * gl_GlobalInvocationID.z;
  uint gsize = gl_NumWorkGroups.x * gl_WorkGroupSize.x * gl_NumWorkGroups.y * gl_WorkGroupSize.y * gl_NumWorkGroups.z * gl_WorkGroupSize.z;
  uint perInv = nSamples / gsize + uint(nSamples % gsize != 0U);

  uvec2 rng;
  MWC64X_SeedStreams(rng, off, uint64_fromUint(perInv), g);
  for (uint i = g * perInv; i < (g + 1U) * perInv; ++i) {
    if (i >= nSamples)
      return;
    while (true) {
      uint u0_ = MWC64X_NextUint(rng);
      int u0 = int(u0_ & uint(INT_MAX));
      if (u0_ > uint(INT_MAX))
        u0 = -u0;
      uint u1 = MWC64X_NextUint(rng);
      uint r = u1 & 0x0000007FU;

      if (r > 0U) {
        if (abs(u0) < ixRatio[r]) {
          samples[i] = fac * float(u0) * xr[r];
          break;
        }
        else {
          float x = fac * float(u0) * xr[r];
          float y = yt[r - 1U] + ufac * float(u1) * (yt[r] - yt[r - 1U]);

          if (y < normPdf(x)) {
            samples[i] = x;
            break;
          }
          else continue;
        }
      }
      else {
        if (abs(u0) < iar0) {
          samples[i] = fac * float(u0) * a / yt[r];
          break;
        }
        else {
          float x;
          float y;
          while (true) {
            uint u2 = MWC64X_NextUint(rng);
            uint u3 = MWC64X_NextUint(rng);
            x = -log(float(u2) * ufac) / xr[r];
            y = -log(float(u3) * ufac);
            if (2.0 * y > x * x) {
              samples[i] = bool(u2 & 0x00000001U) ? (x + xr[r]) : -(x + xr[r]);
              break;
            }
          }
          break;
        }
      }
    }
  }
}

float normPdf(float x) {
  return exp(-0.5 * x * x);
}
