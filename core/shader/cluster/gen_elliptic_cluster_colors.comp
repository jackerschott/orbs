#version 320 es

layout(location = 0) uniform uint nPt;
layout(location = 1) uniform uint nColors;

layout(binding = 0) buffer paletteBuf { vec4 palette[]; };
layout(binding = 1) buffer blurSizesBuf { float blurSizes[]; };
layout(binding = 2) buffer uSamplesBuf { float uSamples[]; };
layout(binding = 3) buffer colorsBuf { vec4 colors[]; };

vec3 hsv2rgb(vec3 c);

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main() {
	uint g = gl_GlobalInvocationID.x;
	g += gl_NumWorkGroups.x * gl_WorkGroupSize.x * gl_GlobalInvocationID.y;
	g += gl_NumWorkGroups.x * gl_WorkGroupSize.x
		* gl_NumWorkGroups.y * gl_WorkGroupSize.y
		* gl_GlobalInvocationID.z;
	uint gsize = gl_NumWorkGroups.x * gl_WorkGroupSize.x
		* gl_NumWorkGroups.y * gl_WorkGroupSize.y
		* gl_NumWorkGroups.z * gl_WorkGroupSize.z;
	uint perInv = nPt / gsize + uint(nPt % gsize == 0U);

	for (uint i = g * perInv; i < (g + 1U) * perInv; ++i) {
		if (i >= nPt)
			return;
		float u = uSamples[i];

		float sum = blurSizes[0];
		vec4 color = palette[nColors - 1U];
		for (uint i = 0U; i < nColors - 1U; ++i) {
			if (sum >= u)
				color = palette[i];
			else sum += blurSizes[i + 1U];
		}
		if (sum >= u)
			color = palette[nColors - 1U];

		colors[i] = color;
	}
}

vec3 hsv2rgb(vec3 c) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
