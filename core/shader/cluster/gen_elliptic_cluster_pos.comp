#version 320 es

#define PI 3.14159265358979323846

layout(location = 0) uniform uint nPt;
layout(location = 1) uniform float p;
layout(location = 2) uniform float eps;
layout(location = 3) uniform mat4 rot;
layout(location = 4) uniform float dr;
layout(location = 5) uniform float dz;

layout(binding = 0) buffer uSamplesBuf { float uSamples[]; };
layout(binding = 1) buffer nSamplesBuf { float nSamples[]; };
layout(binding = 2) buffer posBuf { vec4 pos[]; };
layout(binding = 3) buffer velBuf { vec4 vel[]; };
layout(binding = 4) buffer LBuf { float L[]; };
layout(binding = 5) buffer EBuf { float E[]; };

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main() {
	uint g = gl_GlobalInvocationID.x;
	g += gl_NumWorkGroups.x * gl_WorkGroupSize.x * gl_GlobalInvocationID.y;
	g += gl_NumWorkGroups.x * gl_WorkGroupSize.x
		* gl_NumWorkGroups.y * gl_WorkGroupSize.y
		* gl_GlobalInvocationID.z;
	uint gsize = gl_NumWorkGroups.x * gl_WorkGroupSize.x
		* gl_NumWorkGroups.y * gl_WorkGroupSize.y
		* gl_NumWorkGroups.z * gl_WorkGroupSize.z;
	uint perInv = nPt / gsize + uint(nPt % gsize == 0U);

	for (uint i = g * perInv; i < (g + 1U) * perInv; ++i) {
		if (i >= nPt)
			return;
		
		float u = uSamples[i];
		float n1 = nSamples[i];
		float n2 = nSamples[nPt + i];

		float phi = 2.0 * PI * u;
		float c = cos(phi);
		float s = sin(phi);
		float r = p * inversesqrt(1.0 - eps * eps * c * c) + n1 * dr;

		pos[i] = rot * vec4(r * c, r * s, n2 * dz, 0.0);
		vec3 dv = vec3(
			nSamples[2U * nPt + i],
			nSamples[3U * nPt + i],
			nSamples[4U * nPt + i]
		);
		vec3 v = 0.01 * (rot * vec4(-r * s, r * c, 0.0, 0.0)).xyz;
		float fac = r / (r - 1.0);
		vel[i] = vec4(v, sqrt(fac * (1.0 + fac * dot(v, v))));
		L[i] = length(cross(pos[i].xyz, vel[i].xyz));
		E[i] = (1.0 / length(pos[i]) - 1.0) * vel[i].w;
	}
}
