#version 320 es

layout(location = 0) uniform uint nPt;
layout(location = 1) uniform float dt;

layout(binding = 0) buffer posBuf { vec4 pos[]; };
layout(binding = 1) buffer velBuf { vec4 vel[]; };
layout(binding = 2) buffer LBuf { float L[]; };
layout(binding = 3) buffer EBuf { float E[]; };

float rdd_func(float r, float L);

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main() {
	uint g = gl_GlobalInvocationID.x;
	g += gl_NumWorkGroups.x * gl_WorkGroupSize.x * gl_GlobalInvocationID.y;
	g += gl_NumWorkGroups.x * gl_WorkGroupSize.x
		* gl_NumWorkGroups.y * gl_WorkGroupSize.y
		* gl_GlobalInvocationID.z;
	uint gsize = gl_NumWorkGroups.x * gl_WorkGroupSize.x
		* gl_NumWorkGroups.y * gl_WorkGroupSize.y
		* gl_NumWorkGroups.z * gl_WorkGroupSize.z;
	uint perInv = nPt / gsize + uint(nPt % gsize == 0U);

	for (uint i = g * perInv; i < (g + 1U) * perInv; ++i) {
		if (i >= nPt || length(pos[i].xyz) < 1.5)
			return;
		
		// pos[i] += vel[i] * dt;
		
		// Transform position and velocity to movement plane coordinates
		vec3 e1 = normalize(pos[i].xyz);
		vec3 e2 = normalize(vel[i].xyz - dot(vel[i].xyz, e1) * e1);

		vec2 p = vec2(dot(pos[i].xyz, e1), dot(pos[i].xyz, e2));
		vec2 v = vec2(dot(vel[i].xyz, e1), dot(vel[i].xyz, e2));

		// Compute proper time interval dtau as well as phi, r and rd
		float dtau = dt / vel[i].w;
		float phi = atan(p.y, p.x);
		float r = length(p);
		float rd = dot(p, v) / r;

		// Compute r and phi for tau + dtau with the Runge-Kutta method
		float r1 = r;
		float phid1 = L[i] / (r1 * r1);
		float rd1 = rd;
		float rdd1 = rdd_func(r1, L[i]);

		float r2 = r + 0.5 * rd1 * dtau;
		float phid2 = L[i] / (r2 * r2);
		float rd2 = rd + 0.5 * rdd1 * dtau;
		float rdd2 = rdd_func(r2, L[i]);

		float r3 = r + 0.5 * rd2 * dtau;
		float phid3 = L[i] / (r3 * r3);
		float rd3 = rd + 0.5 * rdd2 * dtau;
		float rdd3 = rdd_func(r3, L[i]);

		float r4 = r + rd3 * dtau;
		float phid4 = L[i] / (r4 * r4);
		float rd4 = rd + rdd3 * dtau;
		float rdd4 = rdd_func(r4, L[i]);

		phi += (phid1 + 2.0 * (phid2 + phid3) + phid4) * dtau;
		r += (rd1 + 2.0 * (rd2 + rd3) + rd4) * dtau;
		float phid = L[i] / (r * r);
		rd += (rdd1 + 2.0 * (rdd2 + rdd3) + rdd4) * dtau;

		p = vec2(r * cos(phi), r * sin(phi));
		v = vec2(rd * cos(phi) - r * phid * sin(phi),
				rd * sin(phi) + r * phid * cos(phi));

		vec3 pos_ = p.x * e1 + p.y * e2;
		if (length(pos_) < 1.5) {
			pos[i] = vec4(0.0, 0.0, 0.0, 0.0);
		}
		else {
			vec3 vel_ = v.x * e1 + v.y * e2;
			float fac = r / (r - 1.0);
			vel[i] = vec4(vel_, sqrt(fac * (1.0 + fac * dot(vel_, vel_))));
			pos[i] = vec4(pos_, pos[i].w + dt);
		}
	}
}

float rdd_func(float r, float L) {
	return -0.5 * (r * r + L * L * (3.0 - 2.0 * r)) / (r * r * r * r);
}
